{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","console","log","color","onClick","Component","Header","ErrorBoundary","hasError","error","info","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,cAAcC,IAAG,+BAA0BH,EAA1B,mBAC1B,6BACE,4BAAKF,GACL,2BAAIC,MCaGK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BACIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKJ,EAAOG,GAAGR,GACfA,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCGhBW,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKV,UAAU,OACb,2BACEW,aAAW,gBACXX,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCDHK,EAPA,SAACC,GACd,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UACjEJ,EAAMK,WC4BEC,E,YA9BX,aAAe,IAAD,8BACV,+CAaJC,YAAc,WACV,EAAKC,UAAS,SAAAC,GACV,MAAO,CAAEC,MAAO,EAAKD,MAAMC,MAAQ,OAdvC,EAAKD,MAAQ,CACTC,MAAO,GAHD,E,mFAOQC,EAAWC,GAC7B,OAAIC,KAAKJ,MAAMC,QAAUE,EAAUF,Q,+BAcnC,OADAI,QAAQC,IAAI,iBAER,4BAAQC,MAAOH,KAAKb,MAAMgB,MAAOC,QAASJ,KAAKN,aAA/C,UACYM,KAAKJ,MAAMC,W,GAzBPQ,aCiBbC,E,iLATP,OADAL,QAAQC,IAAI,UAER,6BACI,wBAAI/B,UAAU,MAAd,eACA,kBAAC,EAAD,CAAegC,MAAO,a,GAVjBE,aCoBNE,E,YApBb,WAAYpB,GAAQ,IAAD,8BACjB,+CACKS,MAAQ,CACXY,UAAU,GAHK,E,+EAODC,EAAOC,GACvBV,KAAKL,SAAS,CAAEa,UAAU,M,+BAI1B,OAAIR,KAAKJ,MAAMY,SACN,uDAEAR,KAAKb,MAAMK,a,GAhBIa,aC+CbM,G,kBAvCb,aAAe,IAAD,8BACZ,+CAaFC,eAAiB,SAACC,GAChB,EAAKlB,SAAS,CAACmB,YAAaD,EAAME,OAAOC,SAbzC,EAAKpB,MAAQ,CACXrB,OAAQ,GACRuC,YAAa,IAJH,E,iFAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAK1B,SAAS,CAAEpB,OAAQ8C,S,+BAO/B,IAAD,EACyBrB,KAAKJ,MAA7BrB,EADD,EACCA,OAAQuC,EADT,EACSA,YACVQ,EAAiB/C,EAAOgD,QAAO,SAAAC,GACnC,OAAOA,EAAMxD,KAAKyD,cAAcC,SAASZ,EAAYW,kBAEvD,OAAQlD,EAAOoD,OAGb,yBAAKxD,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWU,aAAcmB,KAAKY,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUrC,OAAQ+C,OAPxB,wBAAInD,UAAU,MAAd,e,GAzBYkC,c,MCGEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAE,EAAF,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.9e923954.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robo friend\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      { robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={robots[i].id}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        aria-label='Search Robots'\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '2px solid black', height:'800px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count) {\n            return true;\n        };\n        return false;\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return { count: this.state.count + 1 };\n        });\n    }\n\n    render() {\n        console.log(\"CounterButton\");\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     return false;\n    // }\n\n    render() {\n        console.log(\"header\");\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops. That is not good</h1>\r\n    } else {\r\n      return this.props.children\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: '',\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({ robots: users}));\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({searchField: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchField } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n    return !robots.length ?\r\n      <h1 className='tc'>LOADING</h1> :\r\n    (\r\n      <div className='tc'>\r\n        <Header />\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots}/>\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(< App />,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}